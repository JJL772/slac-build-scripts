# Boost.Build Configuration
# Automatically generated by bootstrap.sh

import option ;
import feature ;

# Compiler configuration. This definition will be used unless
# you already have defined some toolsets in your user-config.jam
# file.
if ! gcc in [ feature.values <toolset> ]
{
using gcc : : /sdf/sw/epics/package/linuxRT/buildroot-2025.02/host/linux-x86_64/x86_64/bin/x86_64-buildroot-linux-gnu-g++ ;
}

project : default-build <toolset>gcc ;

# Python configuration
#using python : 3.6 : /sdf/sw/epics/package/python/3.6.1/buildroot-2025.02-x86_64/bin/python3 : /sdf/sw/epics/package/python/3.6.1/buildroot-2025.02-x86_64/include/python3.6m/ : /sdf/sw/epics/package/python/3.6.1/buildroot-2025.02-x86_64/lib/ ;

path-constant ICU_PATH : /sdf/sw/epics/package/linuxRT/buildroot-2025.02/buildroot-2025.02-x86_64/output/staging/usr ;


# List of --with-<library> and --without-<library>
# options. If left empty, all libraries will be built.
# Options specified on the command line completely
# override this variable.
libraries =  ;

# These settings are equivivalent to corresponding command-line
# options.
option.set prefix : /sdf/sw/epics/package/boost/1.64.0/buildroot-2025.02-x86_64 ;
option.set exec-prefix : /sdf/sw/epics/package/boost/1.64.0/buildroot-2025.02-x86_64 ;
option.set libdir : /sdf/sw/epics/package/boost/1.64.0/buildroot-2025.02-x86_64/lib ;
option.set includedir : /sdf/sw/epics/package/boost/1.64.0/buildroot-2025.02-x86_64/include ;

# Stop on first error
option.set keep-going : false ;
